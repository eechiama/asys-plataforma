/************/
 Versión 5.5
/************/

Se eliminó la opción de promedio de las muestras y se implemento la opción de realizar la MEDIANA de las muestras, para ambas plataformas.

Ver el .txt "Protocolo y Mediana" para usarla.


Arduino:
--------

-> Implementada la selección de la frecuencia de muestreo


LPC1769-ADC-SERIAL:
-------------------

-> La interrupción del ADC ya no realiza ninguna cuenta. Simplemente entrega la muestra.

->  Para la implementación de la mediana se agregaron los archivos: PR_ADC.c, PR_ADC.h, AP_ADC.c y AP_ADC.h


Script Matlab:
--------------

-> Renombrada la variable info.CANT_MUESTRAS_PROMEDIO a info.MEDIANA_SIZE para reflejar el cambio del promedio a la mediana.

-> Implementada la selección de frecuencia de muestreo para Arduino.



/************/
 Versión 5.4
/************/

Script Matlab:
--------------

-> Bug fix: masomenos a partir de 30 segundos el plot se hacía más lento respecto a la señal real. Sucedía que no se guardaba la variable info.FirstPlot en la figura, entonces en cada llamada a una función de plot info.FirstPlot seguía siendo 1 y se volvía a hacer plot() estando 'hold on' puesto. Muchísimos plots superpuestos!!

-> Bug fix: Si se hacía Start Sampling, luego se detenía y se volvía a comenzar el Sampleo el programa dejaba de funcionar. La variable info.FirstPlot nunca se reiniciaba a 1 para el nuevo proceso de muestreo, entonces las funciones de plot tomaban info.FirstPlot == 0 y al hacer set(hs.Plot..) hs.Plot no existía porque antes se había reiniciado el gráfico.


/************/
 Versión 5.3
/************/


Script Matlab:
--------------

-> El plot en tiempo real ya no es solamente con 'Axis Tight'. Si no se selecciona 'Axis Tight', el eje X hace + 5 al llegar al límite. El eje Y es configurable desde
los parámetros de Ylim. Otorga flexibilidad para ver la señal. En caso de que el Ylim no tenga sentido, se lo ignora.

-> Las opciones que no se deben usar en los distintos modos de gráfico ahora se ponen en color gris y se deshabilitan.

-> Si en opción de ploteo manual los Xlim o Ylim no tienen sentido, se le avisa al usuario y se ignora el comando.

-> Incorporada la variable info.CANT_MUESTRAS_PROMEDIO. Debe ser siempre el mismo valor que la constante CANT_MUESTRAS_PROMEDIO en los códigos del micro.
Esta variable indica la cantidad de muestras que se promedian antes de mandar una. La pongo para tener la posibilidad de probar fácilmente un promedio simple, que ya está incorporado en el micro y solo se debe cambiar la constante. Sirve para suavizar los glitches del ADC.


/************/
 Versión 5.2
/************/

Arduino:
--------

-> FUNCIONANDO. Compila y se baja bien a la placa. (la del GIBIO, Arduino Nano)

-> La frecuencia de muestreo no es configurable por el usuario. Establecida en 500Hz. (Timer1)

-> 3 Señales de Prueba. La 3ra es apenas random.


LPC1769-ADC-SERIAL:
-------------------

-> Cambiada la señal de prueba para que sea la misma que la que está en el Arduino.

-> Incorporada una 2da señal de prueba.

-> Implementado el protocolo correcto para la entrega de las señales de prueba.


Script Matlab:
--------------

-> Incorporada la funcionalidad de ploteo en "tiempo real". Es un checkbox. (Aclaración: para evitar posibles bugs este plot es siempre con axis tight)

-> Se informa al usuario la frecuencia de muestreo del Arduino (500Hz, no configurable).

-> Se piden y muestran correctamente las señales de prueba.



/************/
 Versión 5.1
/************/

CAMBIADO EL PROTOCOLO PARA LAS SEÑALES DE PRUEBA: AHORA ES '$T1#', '$T2#' y '$T3#'.
Todavía no implementado este cambio en el código de los micros.

-> Agregado el código de Arduino basado en el original hecho por Juan Vorobioff.
TODAVÍA NO ES FUNCIONAL !! Hay que implementar timers para controlar el sampleo. Sino, no hay manera de saber el sample rate.

El ADC del arduino es de 10bits, mientras que el del LPC es de 12bits. Tengo que ajustar la escala del gráfico para cada caso.
Arduino: hasta 2^10 = 1024
LPC: hasta 2^12 = 4096


Arduino:
--------

-> Hechos defines para mejorar legibilidad del código.

-> Se reemplazó la manera de interpretar los comandos recibidos. Se estructuró para ser similar al código del LPC1769-ADC-SERIAL.
Ahora al detectar un comienzo de trama, colecta la misma y cuando se detecta el fin de ella se llama a la función que la analiza.

-> Baudrate corregido: de 9600 a 115200, el usado por la plataforma de Matlab.
xx Falta implementar la posibilidad de configurar la frecuencia de muestreo.


Script Matlab:
--------------

-> Re-organizada la interfaz gráfica.

-> Nuevos radiobuttons que permiten seleccionar la plataforma de adquisición, Infotronic o Arduino.

-> Agregados botones para pedir más señales de prueba (señales 2 y 3).

-> Nuevo Checkbox para controlar la grilla del gráfico.



/************/
  Versión 4
/************/

Se abandonó la esperanza de hacer andar el script de Matlab en Octave. El objeto serial no posee propiedades fundamentales, como lo es 'bytesavailable'.
Por un momento se pudo recibir muestras, pero por cada muestra el script tardaba una eternidad. No era viable.

LPC1769-ADC-SERIAL:
-------------------

-> Agregada la "Test Signal" en el micro. La envía al recibir el comando correcto.


Script Matlab:
--------------

-> Agregada la interfaz para pedirle al micro la señal de prueba, recibirla y plotearla.
-> No se usan más las interrupciones de Serial para obtener las muestras. Ahora el modelo es de polling.
